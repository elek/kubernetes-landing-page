// Code generated by go-bindata.
// sources:
// views/index.html
// views/layouts/master.html
// DO NOT EDIT!

package handlers

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xea\x30\x10\xdd\xe7\x2b\x46\x11\xcb\x6b\x22\xb8\x3b\xe4\x64\xd3\x7d\x37\x6d\x3f\xc0\x89\x27\xc4\x55\x62\x47\xb6\x09\x45\x23\xff\x7b\x15\xb0\x81\x80\xe8\x2e\xc7\x73\x1e\xf3\x08\x91\xc4\x56\x69\x84\xbc\x31\xda\xa3\xf6\x79\x08\x59\xc6\xa5\x9a\xa0\xe9\x85\x73\x65\x2e\x59\xdb\xe3\x0f\x7c\x1f\x9c\x57\xed\x89\x45\x1a\xab\xd1\x1f\x11\x35\xcc\x45\x76\xb4\x62\xbc\x7c\x0d\x92\x69\x73\x86\xa2\x57\x7b\xcd\x94\xc7\xc1\xb1\x06\xb5\x47\x0b\x63\xcd\xb6\x30\xd4\xec\x3f\xd4\xc6\x4a\xb4\xac\x36\xde\x9b\x21\xaf\x32\x00\x00\xde\x6d\x52\x66\xb7\xcd\xab\x0f\xb4\x93\x6a\xd0\xf1\xa2\xdb\x54\x19\x2f\xa4\x9a\xaa\x65\x67\x5e\xd4\x3d\x32\x8b\x6e\x34\xda\xa9\x09\x93\xcf\xf9\x7d\x41\x82\x0b\xd5\x79\xab\x46\x94\x09\xa5\xe0\x8b\xa8\x43\x21\xef\xb1\xbd\x81\x48\x48\x2d\x81\x16\x03\xf2\xc2\x77\xcf\x8c\x77\x31\xa0\x1b\x45\xf3\x50\xe6\xc5\xbd\xdd\x5c\x7b\x08\xab\x8d\x3c\xdd\x30\x11\x58\xa1\xf7\x08\x2b\xf5\x0f\x56\x93\xe8\x0f\x08\xbb\x12\xd6\x31\xff\x4d\x78\xd1\x9b\x7d\x08\x2f\x04\x2e\xb6\xb9\x2b\xa3\x38\x09\xdd\x7c\xdb\x3f\x26\x94\x15\x17\xd0\x59\x6c\xcb\x9c\x28\xd9\xac\xbf\x6c\x1f\x42\x5e\x11\x5d\x9d\xd7\xf3\x98\x21\xf0\x42\x54\xbc\xf0\xf2\xd9\x86\x28\x06\x5f\xf7\x31\xb3\x5f\x30\x93\xe9\xe7\x69\x7c\xa2\x2d\x17\x47\x04\xa8\x25\x2c\x07\x8f\x2f\xf7\x92\xdb\x36\x79\x71\xbe\xf5\xf5\xff\x21\x42\x2d\x43\xc8\x7e\x03\x00\x00\xff\xff\x32\x37\xe6\xde\xf7\x02\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 759, mode: os.FileMode(420), modTime: time.Unix(1521991658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsLayoutsMasterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xdd\x72\xe2\x36\x18\xbd\xe7\x29\x14\xf7\x32\x91\x05\x98\x90\xd0\xb1\x99\x61\xb3\x81\x06\x9a\x2c\x3f\x4d\x42\xf6\x4e\xb6\x64\x5b\x46\x96\x14\x49\x36\xd0\x9d\x7d\xf7\x8e\x6d\x08\x49\x3b\xdb\x9f\xa9\x6e\x24\x9d\x4f\x73\x7c\xce\xa7\x33\xb2\x7f\x46\x64\x64\xf7\x8a\x82\xd4\xe6\x7c\xd8\xf2\xab\x09\x70\x2c\x92\xc0\xa1\xc2\xa9\x00\x8a\xc9\xb0\x05\x00\x00\xfe\x19\x84\x60\x49\x5f\x0b\xa6\x29\x01\x39\xb5\x18\x58\x9c\x18\x00\xe1\xa1\x5e\x43\x51\x8a\xb5\xa1\x36\x70\x0a\x1b\xc3\x6b\xe7\x7d\x49\xe0\x9c\x06\x4e\xc9\xe8\x56\x49\x6d\x9d\xba\xd2\x8c\x48\x0a\x4b\x85\x0d\x9c\x2d\x23\x36\x0d\x08\x2d\x59\x44\x61\xbd\xb9\x00\x4c\x30\xcb\x30\x87\x26\xc2\x9c\x06\x9d\x0b\x60\x52\xcd\xc4\x06\x5a\x09\x63\x66\x03\x21\x9d\x61\xeb\x24\xf0\x93\x94\xd6\x58\x8d\x15\xb8\x59\xad\x4e\xda\x38\x13\x1b\xa0\x29\x0f\x1c\x63\xf7\x9c\x9a\x94\xd2\x0f\x0a\x52\x4d\xe3\xc0\x49\xad\x55\xe6\x67\x84\x72\xbc\x8b\x88\x70\xc3\x23\x57\xb5\x89\x64\x8e\xde\x00\xd4\x73\xdb\x6e\x1b\x45\xc6\x9c\x30\x37\x67\xc2\x8d\x8c\x79\x4f\xcb\x84\xa5\x89\x66\x76\x1f\x38\x26\xc5\xde\x75\x0f\x4e\xc4\xa5\x77\xdd\xdb\xbd\x2e\x3a\x58\x3e\xaf\x47\xe7\xed\xcb\xeb\xe5\x7a\xbe\x9b\x27\xfd\x78\xdf\xbb\x7b\x2e\x7f\x7b\x48\xdb\xb7\xdd\xbe\xb7\xce\xc7\xd1\x94\xaf\x46\x5b\x36\x49\xc6\xa3\x67\x44\x46\x6c\xd5\x9f\xae\xf3\x0f\x6d\xd3\xd2\x18\xa9\x59\xc2\x44\xe0\x60\x21\xc5\x3e\x97\x85\x79\x6b\x87\x65\x96\xd3\xe1\xac\x08\xa9\x16\xd4\x52\x03\x08\x36\x69\x28\xb1\x26\x67\x3e\x6a\x8a\x2d\x1f\x35\x17\xec\x87\x92\xec\x87\x2d\x5f\xe0\x12\x44\x1c\x1b\x13\x38\x02\x97\x21\xd6\xa0\x99\x20\xc1\x7a\x03\x8c\x65\xd1\x66\x0f\xad\x54\x20\x4c\x1a\x28\xe6\x74\x07\x73\x02\x85\xdc\x56\x4d\x57\xb0\x7d\xbc\x73\xfc\x91\x08\x86\x1a\x0b\x02\x22\xc9\xa1\xc9\xa1\x57\x2f\x72\x02\xbb\x20\xd7\xb0\xed\x1c\x2e\xe0\x27\xe7\xbd\x5e\x8e\x05\x61\x22\x79\x73\xac\x70\x42\x7d\x84\x87\xad\x96\x8f\x04\x2e\x87\x2d\x9f\xb0\x37\xb9\x55\x86\x30\x13\x54\xc3\x98\x17\x8c\x1c\x55\xbc\x3b\xa1\xe5\xf6\x80\x36\x99\xc4\x4c\x00\x2d\x39\x0d\x9c\x6a\xe9\x9c\x88\x6a\x61\x9d\x36\xc8\x77\x10\x17\x56\xd6\x52\x79\x52\x21\xca\x42\x0f\xa8\x1d\xec\x1d\x9b\x7c\x1c\xdf\xbe\x59\x9a\x2b\x8e\x2d\x05\xce\x21\xcd\x0e\x70\xbf\x7f\x3f\x9d\xf2\x51\xf5\x95\x83\x2a\x44\x58\x25\xff\x30\x55\xb9\xfd\xa2\x2c\x93\x02\x73\x30\xc5\x25\x5e\x45\x9a\x29\x5b\xa7\xb7\x2e\x66\x8b\x82\xea\x3d\x88\x99\x36\xf6\x02\xd8\x94\x0a\x30\x97\x4a\x51\xed\x66\xe6\xb0\x3f\xe5\x7e\xda\xc4\xde\x37\x0d\x89\xd1\xd1\x29\xd8\x91\x24\xd4\xcd\x5e\x2b\xb6\x3a\xd0\xcd\x12\x7a\x6e\xd7\xed\xb8\x86\xb3\xbc\x0e\x71\xf6\x2e\xc3\x7f\x4d\xf0\x6c\xea\xc9\xee\xe7\x99\xbd\xdb\x94\x2f\x77\x33\xef\xf1\xf6\xe1\xf7\xfc\xfe\x6a\x76\xb3\x59\x6a\xa4\x6f\x07\x68\xa1\x92\x3e\x1e\x7d\x9d\x4c\xb7\xe3\xcf\xf7\x4f\x0f\x23\x34\x51\x93\xf1\x78\xe0\xa5\x6b\x35\xb9\x9c\x6d\x1e\x4e\xdc\x3f\xca\xaf\x8f\x1a\xed\x3f\x32\x41\x44\x66\xdc\x88\xcb\x82\xc4\x1c\x6b\x5a\x3b\xc1\x19\xde\x21\xce\x42\x83\xd4\xb1\x33\xa8\xe3\x76\xba\xee\x00\x15\x39\x39\x82\xff\xec\x6e\xa4\x1e\xc2\x24\x1d\x7c\x3a\x7f\xe9\x2c\x66\xb6\xf4\x96\xe2\xea\xd9\xcb\x93\xf9\x2e\x7d\x1c\xcc\xd0\x2a\x5a\x98\xd1\xfc\x2a\x7d\x64\xe1\xda\x1b\x64\x57\x31\xde\x8c\xe7\x66\x53\xae\x0b\x53\xc6\xb8\x1d\xf6\x16\xff\xdb\xdd\xbf\x7d\x7b\xb2\x3f\x3f\x3d\x7f\xef\x6b\xfa\x75\xd9\x5f\x29\x9a\xa5\xbd\xc7\x76\x97\x5c\x67\x5f\x6c\xbf\xfc\xf5\xf6\x97\x98\xa2\xe9\x62\xc2\x96\xcb\xd5\x62\xb1\x5b\xc5\xe3\x67\xc5\x3a\xf7\xaf\xc5\x13\x19\xed\xb3\x47\xac\x2f\xcf\xaf\xfa\xf3\xa7\x9b\xfc\x85\xff\x27\x5f\xe8\xf0\x9a\xa0\xe6\xaf\xf2\x47\x00\x00\x00\xff\xff\xe7\xf2\xf6\xa6\x66\x06\x00\x00")

func viewsLayoutsMasterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutsMasterHtml,
		"views/layouts/master.html",
	)
}

func viewsLayoutsMasterHtml() (*asset, error) {
	bytes, err := viewsLayoutsMasterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/layouts/master.html", size: 1638, mode: os.FileMode(420), modTime: time.Unix(1521925151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/index.html": viewsIndexHtml,
	"views/layouts/master.html": viewsLayoutsMasterHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
		"layouts": &bintree{nil, map[string]*bintree{
			"master.html": &bintree{viewsLayoutsMasterHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

